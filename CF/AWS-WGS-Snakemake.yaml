Parameters:
  Tag:
    Type: String
    Default: "snakemake-vpc"
    Description: Name of the VPC
  VPCCIDR:
    Type: String
    Default: "10.0.0.0/16"
    Description: CIDR Block for the VPC - This should not overlap with any existing CIDR Blocks
  SubnetACIDR:
    Type: String
    Default: "10.0.0.0/24"
    Description: CIDR Block for Subnet A
  SubnetBCIDR:
    Type: String
    Default: "10.0.1.0/24"
    Description: CIDR Block for Subnet B

Resources:
  VPC:
    Metadata:
      VPC:
        Description: "This VPC is provisioned for the ECS tasks to use"
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      Tags:
        - Key: "Name"
          Value: !Ref "Tag"

  SubnetA:
    Metadata:
      Subnets:
        Description: "Currently two subnets are provisoned for ECS tasks"
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: "AWS::Region"
      VpcId: !Ref "VPC"
      CidrBlock: "10.0.0.0/24"
      Tags:
        - Key: "Name"
          Value: "snakemake-subnet-a"

  SubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: "AWS::Region"
      VpcId: !Ref "VPC"
      CidrBlock: "10.0.1.0/24"
      Tags:
        - Key: "Name"
          Value: "snakemake-subnet-b"

  RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: "Name"
          Value: "snakemake-rt"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref "VPC"
      InternetGatewayId: !Ref "InternetGateway"

  InternetRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  SubnetARouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA

  SubnetBRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB

  VPCSecurityGroup:
    Metadata:
      SecurityGroup:
        Description: "This security group allows all incoming traffic"
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all traffic
      VpcId: !Ref "VPC"
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  WGSECSCluster:
    Metadata:
      ECSCluster:
        Description: "This ECS Cluster will rely on Fargate to provision infrastructure"
    Type: "AWS::ECS::Cluster"
    Properties:
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      ClusterName: wgs-pipeline-cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT
      ServiceConnectDefaults:
        Namespace: wgs-pipeline--cluster
      Tags:
        - Key: "ecs:cluster:createdFrom"
          Value: ecs-console-v2

  WGSBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      BucketName: "wgs-pipeline-bucket"

  WGSLambdaStatesRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "This role is assumed by a Lambda function allows for tasks execution "
      RoleName: "wgs-pipeline-lambda-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  LambdaStatesPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "LambdaStatesPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
            Resource: 
              - !Join
                - ""
                - - "arn:aws:logs:"
                  - !Ref AWS::Region
                  - ":"
                  - !Ref AWS::AccountId
                  - ":*"
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: 
              - !Join
                - ""
                - - "arn:aws:logs:"
                  - !Ref AWS::Region
                  - ":"
                  - !Ref AWS::AccountId
                  - ":log-group:/aws/lambda/WGSStateExecutor:*"
          - Effect: Allow
            Action:
              - "ecs:RunTask"
            Resource: "*"
          - Effect: Allow
            Action:
              - "iam:PassRole"
            Resource: "*"
        
      Roles:
        - !Ref WGSLambdaStatesRole

  WGSPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "This role is assumed by an ECS task allows for tasks execution, a S3 bucket, and other resources accessed by the tibanna services  like cloudwatch, dynamodb, lambda and ECS "
      RoleName: "wgs-pipeline-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  TibannaCW:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "WGSTibannaCW"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: arn:aws:logs:*:*:*
      Roles:
        - !Ref WGSPipelineRole

  TibannaLambda:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "WGSTibannaLambda"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource:
              - !Join
                - ""
                - - "arn:aws:lambda:"
                  - !Ref AWS::Region
                  - ":"
                  - !Ref AWS::AccountId
                  - ":function/run_task_awsem_tibanna_wgs-pipeline"
              - !Join
                - ""
                - - "arn:aws:lambda:"
                  - !Ref AWS::Region
                  - ":"
                  - !Ref AWS::AccountId
                  - ":function/check_task_awsem_tibanna_wgs-pipeline"
              - !Join
                - ""
                - - "arn:aws:lambda:"
                  - !Ref AWS::Region
                  - ":"
                  - !Ref AWS::AccountId
                  - ":function/update_cost_awsem_tibanna_wgs-pipeline"
      Roles:
        - !Ref WGSPipelineRole

  TibannaDynamoDB:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "WGSTibannaDynamoDB"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:DescribeTable"
              - "dynamodb:PutItem"
              - "dynamodb:Query"
              - "dynamodb:UpdateItem"
            Resource: !Join
              - ""
              - - "arn:aws:dynamodb:"
                - !Ref AWS::Region
                - ":"
                - !Ref AWS::AccountId
                - ":table/tibanna-master"
      Roles:
        - !Ref WGSPipelineRole

  TibannaECRTasks:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "WGSTibannaECRTasks"
      PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "ecr:GetAuthorizationToken"
                - "ecr:BatchCheckLayerAvailability"
                - "ecr:GetDownloadUrlForLayer"
                - "ecr:BatchGetImage"
                - "logs:CreateLogStream"
                - "states:DescribeStateMachineForExecution"
              Resource: "*"
      Roles:
        - !Ref WGSPipelineRole

    
  TibannaStateExecutions:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "WGSTibannaStateExecutions"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "states:StartExecution"
              - "states:StopExecution"
              - "states:ListExecutions"
              - "states:DescribeExecution"
              - "states:GetExecutionHistory"
              - "states:DescribeStateMachineForExecution"
              - "states:DescribeStateMachine"
            Resource:
              - !Join
                - ""
                - - "arn:aws:states:"
                  - !Ref AWS::Region
                  - ":"
                  - !Ref AWS::AccountId
                  - ":stateMachine:tibanna_unicorn_wgs-pipeline"
              - !Join
                - ""
                - - "arn:aws:states:"
                  - !Ref AWS::Region
                  - ":"
                  - !Ref AWS::AccountId
                  - ":stateMachine:tibanna_unicorn_wgs-pipeline_costupdater"
              - !Join
                - ""
                - - "arn:aws:states:"
                  - !Ref AWS::Region
                  - ":"
                  - !Ref AWS::AccountId
                  - ":execution:tibanna_unicorn_wgs-pipeline:*"
              - !Join
                - ""
                - - "arn:aws:states:"
                  - !Ref AWS::Region
                  - ":"
                  - !Ref AWS::AccountId
                  - ":execution:tibanna_unicorn_wgs-pipeline_costupdater:*"

          - Sid: VisualEditor1
            Effect: Allow
            Action: states:ListStateMachines
            Resource: "*"
      Roles:
        - !Ref WGSPipelineRole

  TibannaS3:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "WGSTibannaS3"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "*"
            Resource: 
              - !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref WGSBucket
                  - "/*"

              - !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref WGSBucket
      Roles:
        - !Ref WGSPipelineRole

  CodeBuildProjectCreate:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Name: !Join
        - "-"
        - - "wgs-create-pipeline-codebuild"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Description: "Codebuild project to push snakemake image to ecr and deploy tibanna"
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref "AWS::AccountId"
          - Name: AWS_ECR_REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepository}
          - Name: IMAGE_REPO_NAME
            Value: biolabs/snakemake
          - Name: IMAGE_TAG
            Value: "latest"
        Image: "aws/codebuild/standard:5.0"
        PrivilegedMode: true
        Type: "LINUX_CONTAINER"
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source:
        Type: NO_SOURCE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
            build:
              commands:
                - echo Build started on `date`
                - echo Pulling the Docker image...
                - docker pull biolabs/snakemake
                - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
                - virtualenv -p python3.8 ~/venv/tibanna
                - . ~/venv/tibanna/bin/activate
                - pip3 install tibanna
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker image...
                - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
                - tibanna deploy_unicorn --usergroup=wgs-pipeline --buckets=wgs-pipeline-bucket
  
  CodeBuildProjectRemove:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Name: !Join
        - "-"
        - - "wgs-remove-pipeline-codebuild"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Description: "Codebuild project to remove snakemake image from ecr and purge tibanna"
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref "AWS::AccountId"
          - Name: AWS_ECR_REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepository}
          - Name: IMAGE_REPO_NAME
            Value: biolabs/snakemake
          - Name: IMAGE_TAG
            Value: "latest"
        Image: "aws/codebuild/standard:5.0"
        PrivilegedMode: true
        Type: "LINUX_CONTAINER"
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source:
        Type: NO_SOURCE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
            build:
              commands:
                - echo Remove started on `date`
                - aws ecr batch-delete-image --repository-name biolabs/snakemake --image-ids imageTag=latest
                - echo install Tibanna...
                - virtualenv -p python3.8 ~/venv/tibanna
                - . ~/venv/tibanna/bin/activate
                - pip3 install tibanna
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Removing Tibanna and the snakemake image..
                - tibanna cleanup -g wgs-pipeline -p

  EcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: biolabs/snakemake

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "WGSPushImageToEcr"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"
        - PolicyName: "CodeBuildLogsRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"
        - PolicyName: "GetAndPutArtifacts"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt WGSBucket.Arn
                  - !Sub ${WGSBucket.Arn}/*

  WGSTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: aws-otel-collector
          Image: !Join
            - ""
            - - "public.ecr.aws/aws-observability/aws-otel-collector:v0.21.1"
          Essential: true
          Command:
            - "--config=/etc/ecs/ecs-cloudwatch.yaml"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-create-group: true
              awslogs-group: "/ecs/ecs-aws-otel-sidecar-collector"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
        - Name: snakemake
          Image: !Join
            - ""
            - - !Ref AWS::AccountId
              - ".dkr.ecr."
              - !Ref AWS::Region
              - ".amazonaws.com/biolabs/snakemake:latest"
          Essential: true
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-create-group: true
              awslogs-group: "/ecs/wgs-pipeline-snakemake"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          EntryPoint:
            - /bin/bash
            - -c
          Command:
            - 'cd /home ; curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "./awscliv2.zip" ; unzip ./awscliv2.zip ; ./aws/install ; /usr/local/bin/aws s3 sync s3://scotth-bio-pipeline/data/snakefiles ./  ; pip install -U tibanna; export TIBANNA_DEFAULT_STEP_FUNCTION_NAME=tibanna_unicorn_wgs_pipeline ; ls -al ./ ; snakemake -R samtools_sort --tibanna --precommand="ln -s /data1/snakemake/scotth-bio-pipeline/data /data "  --tibanna-config spot_instance=false behavior_on_capacity_limit=wait_and_retry --default-remote-prefix=scotth-bio-pipeline  --jobs=2 --use-conda'
      Cpu: 2048
      EphemeralStorage:
        sizeInGiB: 21
      ExecutionRoleArn: !Join
        - ""
        - - "arn:aws:iam::"
          - !Ref AWS::AccountId
          - ":role/wgs-pipeline-role"
      Family: "wgs-pipeline-task"
      Memory: 9216
      NetworkMode: awsvpc
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      TaskRoleArn: !Join
        - ""
        - - "arn:aws:iam::"
          - !Ref AWS::AccountId
          - ":role/wgs-pipeline-role"

  WGSLambdaFunction:
      Type: AWS::Lambda::Function
      Properties:
        Description: starts a state machine
        FunctionName: "WGSStateExecutor"
        Handler: index.lambda_handler
        MemorySize: 128
        Runtime: python3.9
        Role: !GetAtt 'WGSLambdaStatesRole.Arn'
        Timeout: 240
        Environment:
          Variables:
            CLUSTER: wgs-pipeline-cluster
            CMD: 'cd ~/ ; curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "./awscliv2.zip" ; unzip ./awscliv2.zip ; ./aws/install ; /usr/local/bin/aws s3 sync s3://wgs-pipeline-bucket/data/snakefiles ./; pwd; pip install -U tibanna; export TIBANNA_DEFAULT_STEP_FUNCTION_NAME=tibanna_unicorn_wgs-pipeline ; snakemake -R samtools_sort --tibanna --precommand="ln -s /data1/snakemake/wgs-pipeline-bucket/data /data "  --tibanna-config spot_instance=false behavior_on_capacity_limit=wait_and_retry --default-remote-prefix=wgs-pipeline-bucket --jobs=2 --use-conda;'
            SECURITY_GROUP: !Ref VPCSecurityGroup
            SUBNET_A: !Ref SubnetA
            SUBNET_B: !Ref SubnetB
            TASK: wgs-pipeline-task:6

        Code:
          ZipFile: |
              # Imports
              import boto3
              import os
              import logging
              # Set up clients and resources
              client = boto3.client("ecs")
              # Set up the logger
              #logger = logging.getLogger()
              #logger.setLevel(logging.INFO)
              #logger.setLevel(logging.DEBUG) # Very verbose
             
              def lambda_handler(event, context):
                print(event)

                try:
                  client = boto3.client("ecs")
                  CLUSTER = os.environ['CLUSTER']
                  SECURITY_GROUP = os.environ['SECURITY_GROUP']
                  SUBNET_A = os.environ['SUBNET_A']
                  SUBNET_B = os.environ['SUBNET_B']
                  CMD = os.environ['CMD']
                  TASK = os.environ['TASK']
                  response = client.run_task(
                      cluster=CLUSTER,  # name of the cluster
                      launchType="FARGATE",
                      taskDefinition=TASK,  # replace with your task definition name and revision
                      count=1,
                      platformVersion="LATEST",
                      overrides={
                          "containerOverrides": [
                              {
                                  "name": "snakemake",
                                  "command": [
                                      CMD                  ],
                              }
                          ]
                      },
                       networkConfiguration={
                          "awsvpcConfiguration": {
                              "subnets": [SUBNET_A,SUBNET_B],
                              "securityGroups": [
                                  SECURITY_GROUP,
                              ],
                              "assignPublicIp": "ENABLED",
                          }
                      },
                  )
                  return str(response)
                except Exception as e:
                      print(e)

                      return {
                          'statusCode': 500,
                          'body': str(e)
                      }  
                  

Outputs:
  WGSVpcId:
    Description: The Snakemake VPC ID
    Value: !Ref VPC

  WGSECSCluster:
    Description: The wgs-pipeline-east ECS cluster.
    Value: !Ref WGSECSCluster

  WGSBucket:
    Description: The bucket for data and snakefiles.
    Value: !Ref WGSBucket
